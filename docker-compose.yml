version: "3"

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - 'app-tier'  
  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - 'app-tier'  
    ports:
      - "9092:9092"
    volumes:
      - "./data/kafka_data:/bitnami/kafka/data"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

  init-kafka:
    image: 'bitnami/kafka:latest'
    depends_on:
      - kafka
    networks:
      - 'app-tier'  
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
  db:
    image: postgres:15.0-alpine
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - '5432:5432'
    volumes:
      - './data/postgres:/var/lib/postgresql/data'
      - './postgresql.conf:/etc/postgresql/postgresql.conf'

    environment:
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_DB=postgres'
      - 'PGDATA=/var/lib/postgresql/data'

    networks:
      - 'app-tier'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 50s
      retries: 5

#Services
  kafka-sender:
    build: ./kafka-sender/.  
    networks:
      - 'app-tier'  
    depends_on: 
      - 'kafka'
  kafka-consumer:
    build: ./kafka-consumer/.  
    networks:
      - 'app-tier'  
    depends_on: 
      - 'kafka'
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local 
networks:
  app-tier:
    name: app-tier
    driver: bridge