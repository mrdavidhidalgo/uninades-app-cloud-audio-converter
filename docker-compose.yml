version: "3"

services:
  zookeeper:
    image: 'bitnami/zookeeper:latest'
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - 'app-tier'  
  kafka:
    image: 'bitnami/kafka:latest'
    networks:
      - 'app-tier'  
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    healthcheck:
        #test: ["CMD", "bash", "-c", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
        test: ["CMD", "bash", "-c", "unset" , "JMX_PORT" ,";" ,"/opt/bitnami/kafka/bin/kafka-topics.sh","--zookeeper","zookeeper:2181","--list"]
        #test: ["CMD", "nc", "-vz", "localhost", "9092"]
        interval: 10s
        timeout: 5s
        retries: 5
    depends_on:
      - zookeeper

  init-kafka:
    image: 'bitnami/kafka:latest'
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - 'app-tier'  
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics.sh --bootstrap-server kafka:9092 --list

      echo -e 'Creating kafka topics'
      kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic file.conversion.requested --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
  db:
    image: postgres:15.0-alpine
    command: postgres -c 'config_file=/etc/postgresql/postgresql.conf'
    ports:
      - '5432:5432'
    volumes:
      - './service-data/postgres:/var/lib/postgresql/data'
      - './postgresql.conf:/etc/postgresql/postgresql.conf'

    environment:
      - 'POSTGRES_PASSWORD=postgres'
      - 'POSTGRES_USER=postgres'
      - 'POSTGRES_DB=postgres'
      - 'PGDATA=/var/lib/postgresql/data'

    networks:
      - 'app-tier'  
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 50s
      retries: 5

#Services
  converter-api:
    build: ./converter-api/.  
    networks:
      - 'app-tier'  
    depends_on:
      kafka:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - '5000:5000'
    volumes:
      - './data:/opt/data'
    environment:
      - START_KAFKA_CONSUMER=True
      - EMAIL_ENABLE=False 
      - DATA_PATH=/opt/data
networks:
  app-tier:
    name: app-tier
    driver: bridge


    